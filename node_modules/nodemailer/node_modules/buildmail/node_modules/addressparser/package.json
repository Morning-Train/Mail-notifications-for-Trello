{
  "name": "addressparser",
  "version": "0.3.2",
  "description": "Parse e-mail addresses",
  "main": "src/addressparser.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/andris9/addressparser.git"
  },
  "author": {
    "name": "Andris Reinman"
  },
  "license": "MIT",
  "scripts": {
    "test": "grunt"
  },
  "devDependencies": {
    "chai": "^1.10.0",
    "grunt": "^0.4.5",
    "grunt-contrib-jshint": "^0.10.0",
    "grunt-mocha-test": "^0.12.4",
    "mocha": "^2.1.0"
  },
  "readme": "# addressparser\n\nParse e-mail address fields. Input can be a single address (`\"andris@kreata.ee\"`), a formatted address (`\"Andris Reinman <andris@kreata.ee>\"`), comma separated list of addresses (`\"andris@kreata.ee, andris.reinman@kreata.ee\"`), an address group (`\"disclosed-recipients:andris@kreata.ee;\"`) or a mix of all the formats.\n\nIn addition to comma the semicolon is treated as the list delimiter as well (except when used in the group syntax), so a value `\"andris@kreata.ee; andris.reinman@kreata.ee\"` is identical to `\"andris@kreata.ee, andris.reinman@kreata.ee\"`.\n\n## Installation\n\nInstall with npm\n\n```\nnpm install addressparser\n```\n\n## Usage\n\nInclude the module\n\n```javascript\nvar addressparser = require('addressparser');\n```\n\nParse some address strings with `addressparser(field)`\n\n```javascript\nvar addresses = addressparser('andris <andris@tr.ee>');\nconsole.log(addresses); // [{name: \"andris\", address:\"andris@tr.ee\"}]\n```\n\nAnd when using groups\n\n```javascript\naddressparser('Composers:\"Bach, Sebastian\" <sebu@example.com>, mozart@example.com (Mozzie);');\n```\n\nthe result would be\n\n```\n[\n    {\n        name: \"Composers\",\n        group: [\n            {\n                address: \"sebu@example.com\",\n                name: \"Bach, Sebastian\"\n            },\n            {\n                address: \"mozart@example.com\",\n                name: \"Mozzie\"\n            }\n        ]\n    }\n]\n```\n\n> Be prepared though that groups might be nested.\n\n## Notes\n\nThis module does not decode any mime-word or punycode encoded strings, it is only a basic parser for parsing the base data, you need to decode the encoded parts later by yourself\n\n## License\n\n**MIT**",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/andris9/addressparser/issues"
  },
  "homepage": "https://github.com/andris9/addressparser",
  "_id": "addressparser@0.3.2",
  "_shasum": "59873f35e8fcf6c7361c10239261d76e15348bb2",
  "_from": "addressparser@^0.3.2",
  "_resolved": "https://registry.npmjs.org/addressparser/-/addressparser-0.3.2.tgz"
}
